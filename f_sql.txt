SQL questions -
A table schema with tables like employee, department, 
employee_to_projects, projects
1) Select employee from departments where max salary of the 
   department is greater than 40k
2) Select employee assigned to projects
3) Select employee which have the max salary in a 
   given department
4) Select employee with second highest salary
5) Table has two data entries every day for # of apples and oranges sold. write a query to get
   the difference between the apples.


#1)

select id from employees where salary in (select max(salary) as max_sal from 
employees group by department_id having max(salary)>40000)

or

select id from employees e1
join
(select department_id,max(salary) as max_sal from 
employees group by department_id having max_sal>40000)e2
on e1.department_id=e2.department_id
and e1.salary=e2.max_sal


#2)
select a.employee_id
from employee_to_projects a inner join projects b
on a.project_id = b. project_id

#3) 


select id from
(select id,dense_rank() over(partition by department_id order by salary desc) as rnk
 from employees)x where x.rnk=1


or 


select id from
employees a
join(
select department_id,max(salary) as max_sal from employees group by department_id
  )b
on a.department_id=b.department_id
and a.salary=b.max_sal

#4)

select id from employees e1
where 1=(select count(distinct e2.salary) from
         employees e2 where e2.salary>e1.salary)

or

select id,salary from (select *, dense_rank() over(partition by department_id order by salary desc) as rnk
from employees)x where rnk=2

#5) 

Apple Orange difference in a day:


create table day_fruits( day_sale date,fruit varchar(50),quantity int);

insert into day_fruits values('11/6/2018','apple',40);

insert into day_fruits values('11/5/2018','orange',60);

insert into day_fruits values('11/5/2018','apple',70);

insert into day_fruits values('11/6/2018','orange',70);


# if only 1 quantity for a fruit in a day:

select day_sale,max(a.quantity)-min(a.quantity) as diff_app_orange from
day_fruits a group by day_sale;

# if diff quantities are added for a fruit in a day:

insert into day_fruits values('11/6/2018','apple',50);
insert into day_fruits values('11/5/2018','orange',80);


select x.day_sale,max(x.tot_quantity)-min(x.tot_quantity) as diff from (
select day_sale,sum(a.quantity) as tot_quantity from day_fruits a group by day_s
ale,fruit)x group by day_sale;

# using case statement (2 ways):

select x.day_sale,abs(sum(x.quant_apple)-sum(x.quant_orange)) as diff from (select day_sale,case when fruit='apple' then quantity else 0 end as quant_apple,case when fruit='orange' then quantity else 0 end as quant_orange from day_fruits)x group by day_sale;

select day_sale,abs(sum(case when fruit='apple' then quantity else 0 end)-sum(case when fruit='orange' then quantity else 0 end)) as diff from day_fruits group by day_sale;


'''
1.Percentage increase in revenue compared to promoted and non-promoted products. 
2. Products classes that has the highest transactions 
3. Count of Customers who bought 2 items having('Bravo Large Canned Shrimp','Excel Monthly Computer Magazine')/ having product class (94,107)'''

1.
# pct of sales of promoted products:

select (x.promotion-x.no_promotion)*100/(x.no_promotion) as pct from 
(select sum(case when sales.promotion_id=0 then sales.store_sales else 0 end) as no_promotion,
sum(case when sales.promotion_id<>0 then sales.store_sales else 0 end) as promotion
from sales sales)x;

# pct increase:
select x.product_id,
(abs(sum(p_tot)-sum(np_tot))/sum(np_tot)*100) as pct
from
(
select 
a.product_id,
(case when promotion_id=0 then units_sold else 0 end)*b.price as np_tot,
(case when promotion_id<>0 then units_sold else 0 end)*b.price as p_tot
from
sales a
join
products b
on
a.product_id=b.product_id
)x
group by
x.product_id

2.
# using limit:

select a.product_id,b.product_class_id,sum(a.units_sold) as tot_transactions 
from
sales a
join
products b
on a.product_id=b.product_id
group by a.product_id
order by tot_transactions desc
limit 1;

# without using limit:

select 
a.product_id,b.product_class_id,
sum(a.units_sold) as tot_transactions
from
sales a
join products b
on a.product_id=b.product_id
group by a.product_id
having tot_transactions=
(select max(x.tot) from (select sum(s.units_sold) as tot from sales s group by s.product_id)x);

# using rownum:

select product_class_id,total 
from 
(select * ,row_number() over(order by total desc) as rownum
from
(select a.product_id,b.product_class_id,sum(a.units_sold) as total 
from sales a 
join 
products b 
on a.product_id=b.product_id 
group by a.product_id)x)y where rownum=1;

3.
select count(*) from (select a.customer_id,count(distinct a.product_id) as cnt
from 
sales a 
join 
products b 
where 
a.product_id=b.product_id
and
b.product_name in ('Bravo Large Canned Shrimp','Excel Monthly Computer Magazine') # b.product_class_id in (94,107)  
group by a.customer_id having cnt=2)x;


### NEW SQL Queries
                      
'''
1. Get the states with more the than 100000 population
2. Count the number of products which sold more than 10 units
3. Get youngest customer who bought atleast 1 product
4. Get the areas from which we have the products sold
1. Second highest salary
2. Top earning person in each department
'''
#1 
select states, population
from tbl
where population > 100000

#2
Select s.customer_id , count(distinct s.product_id) as no_products
from sales s
group by s.customer_id
having count(distinct s.product_id) > 10

#3
select a.customer_id,timestampdiff(year,birthdate,curdate()) as age,cnt 
from customers a
join
(
select customer_id,count(distinct product_id) as cnt
from sales
group by customer_id having cnt>10)b
on a.customer_id=b.customer_id
order by age
limit 1

#2. Top earning person in each department

select employee_id
from (select employee_id, department_id, sal
             dense_rank() over(partition by department_id order by salary desc) as rank
      from   employee
      order by department_id, sal desc)
where rank = 1
