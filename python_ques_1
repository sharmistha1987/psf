#!/usr/bin/env python
# coding: utf-8

# In[1]:


str2='abcd'
print(str2[::-1])


# In[5]:


print(list(str2))


# In[7]:


a=reversed(list(str2))


# In[9]:


list(a)


# In[10]:


b=list(str2)[::-1]
print(b)


# In[13]:


str1="hello world"
str_split=str1.split()
str_rev=str_split[::-1] # or str_rev=reversed(str_split())
sep=" "
final=sep.join(str_rev)
print(final)


# In[15]:


#end = None
myString = '1234567890'
myString[2:] # myString[2:end]


# In[11]:


num=[] # create an empty list

while True:
    s = input("Enter a number: ")
    if s == "done":
        break
    try:
        num.append(int(s)) # keep on appending user input
    except:
        print("Invalid input")
    finally:
        print("we are done")

largest = max(num)
smallest = min(num)

print('list:',num)
print("Maximum is",largest)
print("Minimum is",smallest)


# In[1]:


2+3


# In[2]:


n=10
a=0
b=1
count=0
while count<n:
    print(a)
    x=a+b
    a=b
    b=x
    count=count+1


# In[10]:


def fact(n):
    if n<2:
        return 1
    else:
        return n*fact(n-1)
fact(5)


# In[15]:


str2='hello world'
print(str2)
print(str2.replace('world','everyone'))
print(str2.replace('o','i',1))


# In[16]:


num=1234
num_list=list(int(i) for i in list(str(num)))
print(num_list)


# In[20]:


str='Sismistis'
str.count('is')


# In[7]:


def count_1(sequence,word):
    
 s=[i for i in sequence if i==word]
 return len(s)

count_1('sismis','i')


# In[48]:


def list_tuple(sequence):
    count=0
    for i in list(sequence):
       # if word_search==i:
        count+=1
        yield i,count
list(list_tuple('abcd'))


# In[4]:


n=1233
n1=str(n)
n1.count('3')


# In[25]:


def Counting(Number):
    Count = 0
    while(Number > 0):
        Number = Number // 10 # for counting iteration
        Count = Count + 1
    print('Number of Digits in a Given Number =',Count)

Counting(1234)


# In[20]:


def total_sum(n):
    total = 0
    for i in list(str(n)):
        total+=int(i)
    return total

total_sum(12345)
    


# In[9]:


def cum_sum(n):
    total = 0
    for i in list(str(n)):
        total+=int(i)
        yield total
list(cum_sum(1234))


# In[31]:


def avg_num(n):
#def avg_num(nlist):
    total = 0
    for i in list(str(n)): 
    #for i in nlist:
        total+=int(i)
    return total/len(str(n))   
    #return total/len(nlist)

avg_num(12345)
#avg_num([1,2,3,4,5])


# In[40]:


def med_num(l):
    n=len(l)
    quotient=n//2
    if n<0:
        return None
    elif n%2!=0:
        return sorted(l)[quotient]
    median= sum(sorted(l)[quotient-1:quotient+1])/2
    return median

med_num([1,2,3,4])
med_num([1,2,3,4,5])


# In[41]:


def med_num(l):
    n=len(l)
    quotient=n//2
    if n<0:
        return None
    elif n%2!=0:
        return sorted(l)[quotient]
    median= sum(sorted(l)[quotient-1:quotient+1])/2
    return median

print(med_num([1,2,3,4]))
print(med_num([1,2,3,4,5]))


# In[46]:


list1=[1,2,34,4]
#sorted(list1)
list1.sort()
list1


# In[1]:


mylist1=[1,3,5,-8,-2]
newlist=[]

while mylist1:
    x_min=mylist1[0]
    for i in mylist1:
        if i<x_min:
            x_min=i
    newlist.append(x_min)
    mylist1.remove(x_min)
print(newlist)


# In[9]:


mylist1=[2,5,3,7,6,8]
newlist=[]

while mylist1:
    max_num=mylist1[0]
    for i in mylist1:
        if i>max_num:
            max_num=i
    newlist.append(i)
    mylist1.remove(i)
print(newlist)   # reverse a list


# In[8]:


list1=[1,4,2,4]
list1=set(list1)
sorted(list1)


# In[1]:


str_sort='cdhgjg'
''.join(sorted(list(str_sort)))


# In[8]:


mystr='cdhgjg'
newstrlist=[]

mystrlist=list(mystr)
while mystrlist:
    x_min1=mystrlist[0]
    for i in mystrlist:
        if i<x_min1:
            x_min1=i
    newstrlist.append(x_min1)
    mystrlist.remove(x_min1)
''.join(newstrlist)


# In[2]:


str_sort='cdhgjg'
''.join(sorted(set(str_sort)))


# In[13]:


str_text='this is my text'
str_text.find('is')


# In[5]:


'a'<'b'


# In[24]:


str_text='''hello hello world.hello world is my text'''
print(str_text)
str_text.count('hello world')


# In[93]:


def palindrome(word):
    if word==word[::-1]:
        print(word,'is a palindrome')
    else:
        print(word,'is not a palindrome')

palindrome('madam')

palindrome('madame')

palindrome('m')


# In[100]:


def palindrome_1(word):
    n = len(word)
    if n<1:
        return word
    for i in range(n):
        if word[i]==word[-1-i]:
            return word
        else:
            #msg= word+' '+'is not a palindrome'
            #return msg
            return word+' '+'is not a palindrome'
        
a=palindrome_1('madam')
print(a)
b=palindrome_1('madame')
print(b)
c=palindrome_1('m')
print(c)


# In[126]:


x=list(range(-10,0,1))
print(x)
y=list(range(-1,-11,-1))
print(y)


# In[123]:


z=list(range(11))
print(z)
w=list(range(-11))
print(w)


# In[16]:


def gcd_hcf(n1,n2):
    if (n1==0 and n2==0):
        return 'Error'
    elif((n1==0 and n2!=0)):
        return n2
        #print('hcf/gcd is:',n2)
    elif((n2==0 and n1!=0)):
        return n1
        #print('hcf/gcd is:',n1)
    else:
        if(n1<n2):
            smaller=n1
        else:
            smaller=n2
        i=1
        while(i<=smaller): #try all numbers till smaller to find divisor that makes smaller fully divisible
            if(n1%i==0 and n2%i==0):
                hcf=i
            i+=1
        print('hcf/gcd is:',hcf)
        #return 'hcf/gcd is:'+ str(hcf) --'hcf/gcd is:6'
   
    
    
gcd_hcf(0,24)
        


# In[19]:


import math
x=math.gcd(12,20)
print(x)


# In[4]:


def lcm(n1,n2):
    if(n1>n2):
        greater=n1
    else:
        greater=n2
    while True: #try all numbers which can be fully divided ny n1 and n2
        if(greater%n1==0 and greater%n2==0):
            lcm=greater
            break
        greater+=1
    print('lcm is:',lcm)

lcm(12,20)


# In[5]:


even_list=[]
for i in range(11):
    if(i%2==0):
        even_list.append(i)
    else:
        continue
print(even_list)   


# In[6]:


odd_list=[]
for i in range(11):
    if(i%2!=0):
        odd_list.append(i)
    else:
        continue
print(odd_list)  


# In[12]:


my_list=[1,2,3,4,5,6]
#odd_pos=[my_list[i] for i in range(len(my_list)) if i%2!=0]
even_pos=[my_list[i] for i in range(len(my_list)) if i%2==0]
#print (odd_pos)
print(even_pos)


# In[40]:


num =10
if num > 1:
    for i in range(2,num):# to check division from 2 to num-1
        if (num % i) == 0:
            print(num,"is not a prime number")
            break
        else:
            print(num,"is a prime number")
else:
    print(num,'is not a prime number')


# In[46]:


num=20
prime_list = []
for n in range(2,num+1):#list of numbers from 2 to num
    isPrime = True
    for i in range(2,n):#to check if n is ivisible by any number between 2 to n-1
        if n % i == 0:
            isPrime = False
            break
    if isPrime: # value of isprime is True
        prime_list.append(n)
print(prime_list)


# In[47]:


mylist=[2,3,4,5,6]
max_num=mylist[0]
for i in mylist:
    if i>max_num:
        max_num=i
print(max_num)


# In[56]:


ip='12.4.45.99'
invalid=False
ip_list=ip.split('.')
str_num=''.join(ip_list)
if str_num.isdigit()==False:
    invalid=True
else:    
    for i in ip_list:
        if int(i)<0 or int(i)>255:
            invalid=True
            break
            
if(invalid ==False):
    print('Valid ip')
else:
    print('Invalid ip')

        


# In[71]:


def recurs_pattern(s,p):
    if len(s)<len(p):
        return False
    else:
        if s[0]==p or s[0:2]==p:
            return True
        elif len(s[1:])>=len(p):
                return recurs_pattern(s[1:],p)
        else:
            return False
        
recurs_pattern('ximibi','mi')


# In[31]:


text='I am am girl girl I am'
words=text.split()
newlist=[]
for word in words:
    if word not in newlist:
        newlist.append(word) # alternative to set() for removing duplicates


# In[63]:


text='I am am girl girl I am'
words_dict=dict() # create empty dictionary
words_list=text.split()
for word in words_list:
    if word not in words_dict:
        words_dict[word]=1  # intializing key and value for new word
    else:
        words_dict[word]+=1
print(words_dict)    
    


# In[64]:


max_frequency=max(words_dict.values())
for k,v in words_dict.items():
    if v==max_frequency: 
         print({k:v})
          


# In[66]:


min_frequency=min(words_dict.values())
for k,v in words_dict.items():
    if v==min_frequency: 
         print({k:v})


# In[48]:


text='I am am girl girl I am'
words=text.split()
word_cnt=[words.count(word) for word in words]
dict_words=dict(zip(words,word_cnt))
print(dict_words)      


# In[20]:


from collections import Counter
text='I am am girl girl I am'
words=text.split()
words_count=Counter(words)
dict_words_freq=dict(words_count)
print(dict_words_freq)


# In[57]:


def print_values(**kwargs):
    for k,v in kwargs.items():
        print("The value of {} is {}".format(k,v))

print_values(ab="Sammy", cd="Casey") # do not use k:v instead use k=v form, key should be string but shouldn't be in quotes


# In[56]:


def some_kwargs(**kwargs):
    for k,v in kwargs.items():
        print("The value of {} is {}".format(k,v))


kwargs = {1:"Sammy", 2:"Casey"} # not possible because for using **kwargs keyword should be string.
kwargs = {'1':"Sammy", '2':"Casey"} # do not use k=v instead use k:v form, key should be string and in quotes
some_kwargs(**kwargs)


# In[59]:


def sum_values(*args):
    c=0
    for i in args:
        c+=i

    return 'c='+ str(c) # function will exit her.subsequent statements if written won't be executed.
    
a=sum_values()
print(a)
args=[1]
b=sum_values(*args)
b


# In[19]:


sum_values(1,2,3)


# In[23]:


def sum_values1(farg,*args):
    for i in args:
        c=farg+i
    print(len(args))
    return 'c='+ str(c)

sum_values(1,2)

