'''Print Max element of a given list''':

mylist=[1,2,3,5,7]
max_num=mylist[0]
for i in mylist:
    if i>max_num:
        max_num=i
print(max_num)


''' find n most common occuring words in a text''':

from collections import Counter
text='My name is sam . My company is SF insu. My name is sam'
words=text.split()
word_count=Counter(words) # counter returns dictionary with key = each word and value =no of times that word occured in list
word_count_list=[]
for i in word_count.most_common(4): #most_common(k) will return tuple(word,count) where k number of words mostly appear
    word_count_list.append(i)
print(word_count_list)




'''Triangle pattern generation (using numbers 0-10)''':

num_pat_list=[]
for i in range(10):
    num_pat_list.append(i)
    print(num_pat_list)


'''Triangle pattern generation (using numbers 1-10)''':


num_pat=''
for i in range(1,10):
    num_pat+=str(i)
    print(num_pat)


'''Triangle pattern generation (using 10 *)''':


character='**********'
char_pat=''
for i in character:
    char_pat+=i
    print(char_pat)


'''Triangle pattern generation (using n characters in n lines)''': 

def char_pat(character,n):
    for i in range(1,n+1):
        print(character*i)

char_pat('*',10)




''' find abs minimum difference between two consecutive elements in a list''':

arr_m=[1, 2, 90, 10, 110] 
min_diff=arr_m[1]-arr_m[0]
for i in range(len(arr_m)-1):
    if arr_m[i+1]-arr_m[i] < min_diff:   
        min_diff=abs(arr_m[i+1]-arr_m[i])   # abs minimum difference between two consecutive elements in a list
print(min_diff)
    


# find abs maximum difference between two consecutive elements in a list:


arr=[1, 2, 90, 10, 110] 
max_diff1=arr[1]-arr[0]
for i in range(len(arr)-1):
    if arr[i+1]-arr[i] > max_diff1:   
        max_diff1=abs(arr[i+1]-arr[i])   # abs maximum difference between two consecutive elements in a list
print(max_diff1)


# max diference between any two elements in a list:


def maxDiff(arr):
    
    max_diff = arr[1] - arr[0] 
      
    for i in range(len(arr)): 
        for j in range(i+1, len(arr)): 
            if(arr[j] - arr[i] > max_diff):  
                max_diff = arr[j] - arr[i]  # max diference between any two elements in a list
      
    return max_diff 
      
arr1 = [1, 2, 90, 10, 110]
print ("Maximum difference is", maxDiff(arr1)) 


# min diference between any two elements in a list:


def minDiff(arr):
    
    min_diff1 = arr[1] - arr[0] 
      
    for i in range(len(arr)): 
        for j in range(i+1, len(arr)): 
            if(arr[j] - arr[i] < min_diff1):  
                min_diff1 = arr[j] - arr[i]  # min diference between any two elements in a list
      
    return min_diff1

arr2 = [1, 2, 90, 10, 110]
print ("Minimum difference is", minDiff(arr2))


# get max diff between minutes watched:


tup_mint=[(0,15),(10,25)]
mint_list=[]
for m in tup_mint:
    for e in m:
        mint_list.append(e)  # convert list of tuples to list
        
max_mint=mint_list[1]-mint_list[0]
for i in range(len(mint_list)):
    for j in range(i+1,len(mint_list)):
        if mint_list[j]-mint_list[i]>max_mint:
            max_mint=mint_list[j]-mint_list[i] # get max diff between minutes watched
print(max_mint) 


# get max diff between minutes watched:


list_mint=[(0,15),(10,20),(0,25)]
newlist=[]
for x,y in list_mint:
    diff=y-x
    newlist.append(diff)
    
print(max(newlist))


# Count of set of words in a text:


text_1='Hello World me Hello World Sam Hello World us'
text_1.count('Hello World')


# count of one word in a text:


text_1='Hello World me Hello World Sam Hello World us'
text_srch='Hello'
count=0
for word in text_1.split():
    if word.strip()==text_srch:
        count+=1
print(count)
    


# Count of set of words in a text where there is a separator after set of words:


text_1='Hello World!Hello World!Hello World!'
a=text_1.split('!')
count=0
for i in range(len(a)):
    if a[i]=='Hello World':
        count+=1
print(count)

    


# splits individual char of text_1 as elements of list:


list('Hello world') # splits individual char of text_1 as elements of list


# avg length of sentence:


def avg_sentence(chars):
    words=chars.split() 
    if len(words)==0: # split a string having only blank or whitespace(s) will return 0 as length
        return None
    else:
        total=0
        for word in words:
              total+=len(word)
        avg=total/len(words)
    return avg


# valid IP address:


ip='12.4.45.87'
invalid=False
ip_list=ip.split('.')
str_num=''.join(ip_list)
if str_num.isdigit()==False:
    invalid=True
else:    
    for i in ip_list:
        if int(i)<0 or int(i)>255:
            invalid=True
            break
            
if(invalid ==False):
    print('Valid ip')
else:
    print('Invalid ip')
    
#Recursively parse a string for a pattern that can be either 1 or 2 characters long :

def recurs_pattern(s,p):
    if len(s)<1 or len(p)<1:
        return None
    elif len(s)<len(p):
        return False
    else:
        if s[0]==p or s[0:2]==p:
            return True
        elif len(s[1:])>=len(p):
                return recurs_pattern(s[1:],p)
        else:
            return False
        
recurs_pattern('ximibi','mi')


# alternative to set() for removing duplicates
text='I am am girl girl I am'
words=text.split()
newlist=[]
for word in words:
    if word not in newlist:
        newlist.append(word) # alternative to set() for removing duplicates
print(newlist)

# find occurences of words in a text:

text='I am am girl girl I am'
words_dict=dict() # create empty dictionary #words_dict={}
words_list=text.split()
for word in words_list:
    if word not in words_dict:
        words_dict[word]=1  # intializing key and value for new word
    else:
        words_dict[word]+=1
print(words_dict)    

# find max occuring word(s) in a text:

final_list=[]    
max_frequency=max(words_dict.values())
for k,v in words_dict.items():
    if v==max_frequency: # if words_dict[k]==max_frequency:
         x={k:v}
         final_list.append(x)
        
print(final_list)


# Alternative of finding words with max frequency:

def word_max_freq(text):
    words_cnt={}
    words_list=[]
    words_cnt_list=[]
    words=text.split()
    if len(words)==0:
        return None
    else:
        
        for word in words:
            if word not in words_cnt:
                words_cnt[word]=1
                words_list.append(word)
            else:
                words_cnt[word]+=1
                
        max_count=max(words_cnt.values())
        
        for i in words_list:
            if words_cnt[i]==max_count:
                words_cnt_list.append((i,max_count))
        
        return words_cnt_list




# find min occuring word(s) in a text:
final_list1=[]          
min_frequency=min(words_dict.values())
for k,v in words_dict.items():
    if v==min_frequency:  # if words_dict[k]==min_frequency:
         x={k:v}
         final_list1.append(x)

print(final_list1)
 
# Alternative to find occurences of words in a text:
text='I am am girl girl I am'
words=text.split()
word_cnt=[words.count(word) for word in words]
dict_words=dict(zip(words,word_cnt))
print(dict_words) 

# Alternative to find occurences of words in a text:

from collections import Counter
text='I am am girl girl I am'
words=text.split()
words_count=Counter(words) # returns dictionary with keys as words in text and values as there no of count in text
dict_words_freq=dict(words_count)
print(dict_words_freq)

#Print the first nonrecurring element in a string:

string='fdlahkgfekk'
string_dict=dict() # create empty dictionary
first_occur_list=[]
for c in string:
    if c not in string_dict:
        string_dict[c]=1  # for new char intializing key(char) and value(count) in new dictionary
        first_occur_list.append(c) # set(string)
    else:
        string_dict[c]+=1

for i in first_occur_list:
    if string_dict[i]==1: # check for value in dictionary for element(as key) in list
        break
print(i)

#Print the first nonrecurring element in a list:

list_elem=['ab','cgh','ab','dff','fdd']
words_dict=dict() # create empty dictionary

first_occur_list=[]
for word in list_elem:
    if word not in words_dict:
        words_dict[word]=1  # intializing key and value for new char
        first_occur_list.append(word) # set(list_elem)
    else:
        words_dict[word]+=1

for i in first_occur_list:
    if words_dict[i]==1: # check for value in dictionary for element(as key) in list
        break
print(i)

# generate a list with unique words in a string:

string='fdlahkgfekk'
string_dict=dict() # create empty dictionary
first_occur_list=[]
unique_list=[]
for c in string:
    if c not in string_dict:
        string_dict[c]=1  # for new char intializing key(char) and value(count) in new dictionary
        first_occur_list.append(c) # set(string)
    else:
        string_dict[c]+=1

for i in first_occur_list:
    if string_dict[i]==1: # check for value in dictionary for element(as key) in list
        unique_list.append(i)
print(unique_list)

# remove duplicates from list:

text='I am super girl girl girl I am'
words_dict=dict() # create empty dictionary
words_list=text.split()
unique_list=[]
for word in words_list:
    if word not in words_dict: #it will look in list of keys of words_dict not in list of values 
                               # if words.count(word)==1:
        words_dict[word]=1
        unique_list.append(word)  # appending single occurence of word
    else:
        words_dict[word]+=1
print(unique_list)

# remove duplicates from dictionary:

my_dict={1:'a',2:'b',3:'b',4:'a'}
unique_dict={}
for k,v in my_dict.items():
    if v not in unique_dict.values():
        unique_dict[k]=v
print(unique_dict)

# Determine GCF/HCF:

def hcf(n1,n2):
    if n1<n2:
        smaller=n1
    else:
        smaller=n2
    i=1
    while i<=smaller:
        if(n1%i==0 and n2%i==0):
            hcf=i
        i+=1
    print(hcf)
    
hcf(24,108)

# find pairs where sum of any 2 numbers in 2 given lists is equal to a given sum:

arr1 = [1, 2, 4, 5, 7] 
arr2 = [5, 5, 3, 4, 8] 
sum=9
for i in range(len(arr1)):
    for j in range(len(arr2)):
               if arr1[i]+arr2[j]==sum:
                 print(arr1[i],arr2[j])

# find pairs where sum of any 2 numbers in a list is equal to a given sum:

from itertools import combinations
sum1 = 10
mylist = [5,2,5,9,1]
for var in combinations(mylist, 2): # combinations(<seq>,n) will create possible combinations from values in list in form of tuples(depends on n).
    if var[0] + var[1] == sum1:
        print(var[0], var[1])
        
# Alternative to find pairs and count of pairs where sum of any 2 numbers in a list is equal to a given sum:       
sum1 = 10
mylist = [5,2,5,9,1]
count=0

for i in range(len(mylist)): 
        for j in range(i + 1,len(mylist)): 
            if mylist[i] + mylist[j] == sum1: 
                print(mylist[i],mylist[j])
                count+=1
print('Total pairs:',count)

# median of list of values:

list2=[2,3,4,5,6,7]
s_list2=sorted(list2)
n=len(list2)
quotient=n//2
if n<1:
    None
elif n%2==1: # odd number length #n%2!=0
    median=s_list2[quotient]
    print('median=',median)
else:
    median=sum(s_list2[quotient-1:quotient+1])/2
    print('median=',median)
    
# cumulative sum:
def func1_1(mylist_1):
    total1=0
    for i in list(mylist_1):
        total1+=i
        yield total1
  
 list(func1([4,6,12]))

#alternative to cumulative sum:
 
from itertools import accumulate
mylist =[4,6,12]
def func1():
    return list(accumulate(mylist))
 
# separate out digits from a number:

n=456
digits = [int(i) for i in str(n)]
print(digits)

# find average of list of numbers:

def avg_num(list1):
    n_len=len(list1)
    total=0
    for x in list1:
        total+=x
    avg=total/n_len
    return avg

avg_num([1,2,3,4])

#factorial:

def fact(n):
    if (n==0):
        return 1
    else:
        return n*fact(n-1)
        
  # fibonacci:
  
  def fibo (n):
    a=0
    b=1
    count=0
    while count<n:
     print(a)
     x=a+b
     a=b
     b=x
     count=count+1
   
   # create list of odd position elements:
   
   def odd_pos(mylist):

    for i in range(len(mylist)):
        if i%2==1:
            x=mylist[i]
            odd_pos_elem.append(x)
    return odd_pos_elem
    
    odd_pos([1,2,3,4,5,6])
    
 # Alternative to create list of odd position elements:
    
 def odd_pos(mylist):
   odd_n=list(v for c,v in enumerate(mylist) if c%2 != 0)
   return odd_n

odd_pos([1,2,3,4,5,6]


